#! /bin/sh -ueC

hsh_bundle_usage() {
    cat <<EOF
usage: hsh bundle [options...]

Create a self extractible installer for the current configuration.

Available options:
    -f, --force  bundle a repository disregarding location modifications.
    -n, --name   name of the bundle, default: 'hsh_bundle.run'
EOF
}

hsh_bundle_cleanup() {
    if [ -e "$HSH_DIR/BUNDLE" ]
    then
        [ -e "$1" ] && rm "$1"
        [ -e "$HSH_DIR/BUNDLE_LIST" ] && "$HSH_DIR/BUNDLE_LIST"
        rm -rf "$HSH_DIR/BUNDLE"
        return 1
    fi
    return 0
}

hsh_bundle() {
    hb_name="hsh_bundle.run"
    while [ $# -ne 0 ]
    do
        case "$1" in
            -h|--help)
                hsh_bundle_usage
                return 0
                ;;
            -f|--force)
                hb_force=1
                ;;
            -n|--name)
                shift
                if [ $# -eq 0 ]
                then
                    hsh_die "missing argument for parameter '--name(-n)'"
                fi
                hb_name="${1}"
                ;;
            *)
                hsh_die "unknown option '$1' for command bundle"
                ;;
        esac
        shift
    done
    trap "hsh_bundle_cleanup \"$hb_name\"" EXIT HUP INT QUIT ABRT TERM
    mkdir "$HSH_DIR/BUNDLE"

    # bundle hsh
    mkdir -p "$HSH_DIR/BUNDLE/repos"
    mkdir -p "$HSH_DIR/BUNDLE/root"
    mkdir -p "$HSH_DIR/BUNDLE/dependencies"
    mkdir -p "$HSH_DIR/BUNDLE/hooks"
    
    # check for local modifications
    if [ -z "${hb_force-}" ]
    then
        ls -1 "$HSH_DIR/repos" | while IFS= read -r hb_repo
        do
            hsh_git "$hb_repo" diff --quiet HEAD && continue
            hsh_die "repository '$hb_repo' has local modifications, use '--force' to bundle anyway"
        done
    fi
    ls -1 "$HSH_DIR/repos" | while IFS= read -r hb_repo
    do
        if [ -d "$HSH_DIR/repos/$hb_repo" ]
        then
            cp -rfP "$HSH_DIR/repos/$hb_repo" "$HSH_DIR/BUNDLE/repos" 
            if [ "$hb_repo" = "hsh" ]
            then
                git --work-tree "$HSH_DIR/BUNDLE" \
                    --git-dir "$HSH_DIR/BUNDLE/repos/$hb_repo" \
                    reset --hard HEAD
                hsh_hook "$HSH_ROOT" "$hb_repo" "bundle-in" "$HSH_DIR/BUNDLE"
            else
                git --work-tree "$HSH_DIR/BUNDLE/root" \
                    --git-dir "$HSH_DIR/BUNDLE/repos/$hb_repo" \
                    reset --hard HEAD
                hsh_hook "$HSH_ROOT" "$hb_repo" "bundle-in" "$HSH_DIR/BUNDLE/root"
            fi

            if hsh_git "$hb_repo" ls-files | grep '^h\.sh$'
            then
                hsh_git "$hb_repo" show HEAD:h.sh > "$HSH_DIR/BUNDLE/hooks/$hb_repo"
	    fi
            if hsh_git "$hb_repo" ls-files | grep '^\.hshdependencies$'
            then
                hsh_git "$hb_repo" show HEAD:.hshdependencies > "$HSH_DIR/BUNDLE/dependencies/$hb_repo"
	    fi
        else
            hsh_die "repository '$hb_repo' does not exists"
        fi
    done

    hsh_git hsh show HEAD:bundle_header > "$hb_name"

    tar -C "$HSH_DIR/BUNDLE" -cz . >> "$hb_name"
    chmod u+x "$hb_name"

    rm -rf "$HSH_DIR/BUNDLE"
}

hsh_clone_cleanup() {
    if [ -e "$HSH_DIR/CLONE" ]
    then
        if [ -e "$HSH_DIR/repos/$1" ]
        then
            rm -rf "$HSH_DIR/repos/$1"
        fi
        rm -rf "$HSH_DIR/CLONE"
        return 1
    fi
    return 0
}

hsh_clone_usage() {
    cas << EOF
usage: hsh clone <url>

clone a repository into the current .hsh and check out its content.
EOF
}

hsh_clone() {
    while [ $# -ne 0 ]
    do
        case "$1" in
            -h|--help)
                hsh_clone_usage
                return 0
                ;;
            *)
                hcl_url="$1"
                shift
                break
                ;;
        esac
        shift
    done
    if [ -z "${hcl_url-}" ]
    then
        hsh_die "missing parameter for hsh clone command"
    fi
    hcl_url="$(hsh_complete_url "$hcl_url")"
    hcl_name="$(hsh_url_to_name "$hcl_url")"

	if [ ! -e "$HSH_DIR/repos/$hcl_name" ]
    then
        trap "hsh_clone_cleanup \"$hcl_name\"" EXIT HUP INT QUIT ABRT TERM
        git clone --no-checkout "$hcl_url" "$HSH_DIR/CLONE"
        mv "$HSH_DIR/CLONE/.git" "$HSH_DIR/repos/$hcl_name"
        hsh_config_repo "$hcl_name"
        hsh_git "$hcl_name" checkout HEAD 
        hsh_git "$hcl_name" submodule update --init --recursive
        rmdir "$HSH_DIR/CLONE"
    fi
    if hsh_git "$hcl_name" ls-files | grep '^\.hshdependencies$'
    then
        hsh_git "$hcl_name" show HEAD:.hshdependencies | while IFS= read -r hcl_dep
        do
            $0 clone "$hcl_dep"
        done
    fi
    hsh_hook "$HSH_ROOT" "$hcl_name" "clone"
}

hsh_complete_url() {
    hcu_url="$1"
    shift
    case $hcu_url in
        github.com/*)
            hcu_config_user="$(hsh_git hsh config github.username || true)"
            ;;
        gitlab.com/*)
            hcu_config_user="$(hsh_git hsh config gitlab.username || true)"
            ;;
        *)
            echo "$hcu_url"
            return 0
            ;;
    esac
    hcu_repo="${hcu_url##*/}"
    hcu_url="${hcu_url%/*}"
    hcu_user="${hcu_url##*/}"
    hcu_url="${hcu_url%/*}"
    if [ "$hcu_user" = "$hcu_config_user" ]
    then
        echo "git@$hcu_url:$hcu_user/$hcu_repo"
    else
        echo "https://$hcu_url/$hcu_user/$hcu_repo"
    fi
}

hsh_completion_usage() {
    cat <<EOF
usage: hsh completion 

output completion rules for hsh command.
EOF
}

hsh_completion_cleanup() {
    if [ -e "$2" ]
    then
        mv "$2" "$1"
    fi
}

hsh_completion() {
    hcom_output=""
    while [ $# -ne 0 ]
    do
        case "$1" in
            -h|--help)
                hsh_completion_usage
                return 0
                ;;
            -o|--output)
                shift
                if [ $# -eq 0 ]
                then
                    hsh_die "missing argument for parameter '--output(-o)'"
                fi
                hcom_output="$1"
                ;;
            -*)
                echo "unknown option '$1'"
                return 1
                ;;
            *)
                hco_repo="$1"
                shift
                break
                ;;
        esac
        shift
    done
    if [ "$hcom_output" != "" ]
    then
        trap "hsh_completion_cleanup '$hcom_output' '$hcom_output.$$'" HUP INT QUIT ABRT TERM
        if [ -e "$hcom_output"  ]
        then
            mv "$hcom_output" "$hcom_output.$$"
            sed "/#---8<--- hsh completion rules ---8<---/,/#--->8--- hsh completion rules --->8---/ d"  "$hcom_output.$$" > "$hcom_output"
        fi
        exec 9>>"$hcom_output"
    else
        exec 9>&1
    fi
    echo "#---8<--- hsh completion rules ---8<---" >&9
    hsh_git hsh show HEAD:_hsh >&9
    echo "#--->8--- hsh completion rules --->8---" >&9
    if [ -e "$hcom_output.$$" ]
    then
        rm "$hcom_output.$$"
    fi
}

hsh_config_usage() {
cat << EOF
usage: hsh config <repository> [git options...]

get or set local option for repository, '--local' option is implied.
EOF
}

hsh_config() {
    while [ $# -ne 0 ]
    do
        case "$1" in
            -h|--help)
                hsh_config_usage
                return 0
                ;;
            *)
                hco_repo="$1"
                shift
                break
                ;;
        esac
        shift
    done
    if [ -z "${hco_repo-}" ]; then
           hsh_config_usage
           exit 1
    fi
    hsh_git "${hco_repo}" config "$@"
}

hsh_config_repo() {
    hsh_git "$1" config core.worktree "$HSH_ROOT"
    hsh_git "$1" config core.sparseCheckout true
    hsh_git "$1" config pull.rebase true
    hsh_git "$1" config status.showUntrackedFiles no 
    cat <<- 'EOF' > "$HSH_DIR/repos/$1/info/sparse-checkout" 
		/*
		!README.md
		!.gitmodules
		!.gitignore
		!.gitattributes
		!h.sh
		!.hshdependencies
		!LICENSE
		EOF
    cat <<- 'EOF' >> "$HSH_DIR/repos/$1/info/exclude"
		README
		.gitmodules
		.gitignore
		.gitattributes
		h.sh
		.hshdependencies
		LICENSE
		EOF
}

hsh_dependency_usage() {
    cat <<EOF 
usage: hsh dependency <repository> [[add | rm] <url>]
EOF
}

hsh_dependency() {
    while [ $# -ne 0 ]
    do
        case "$1" in
            -h|--help)
                hsh_dependency_usage
                return 0
                ;;
            -*)
                echo "unknown option '$1'"
                return 1
                ;;
            *)
                hd_repo="$1"
                shift
                break
                ;;
        esac
        shift
    done

    if [ $# -eq 0 ]
    then
        hsh_git "$hd_repo" ls-files | grep -q .hshdependencies \
            && hsh_git "$hd_repo" show HEAD:.hshdependencies
        return 0
    fi

    hd_action="$1"
    shift
    if [ $# -eq 0 ]
    then
        hsh_die "missing argument for hsh dependency"
    fi
    case "$hd_action" in 
        add)
            $0 clone "$1"
            if hsh_git "$hd_repo" ls-files | grep -q '\.hshdependencies' 
            then
                hd_sha1="$(hsh_git "$hd_repo" show HEAD:.hshdependencies | sed "\$ a $1" | hsh_git "$hd_repo" hash-object -t blob -w --stdin)"
                hsh_git "$hd_repo" update-index --add --cacheinfo "100644" "$hd_sha1" ".hshdependencies"
		hsh_git "$hd_repo" update-index --skip-worktree ".hshdependencies"
            else
                hd_sha1="$(echo "$1" | hsh_git "$hd_repo" hash-object -t blob -w --stdin)"
                hsh_git "$hd_repo" update-index --add --cacheinfo "100644" "$hd_sha1" ".hshdependencies"
		hsh_git "$hd_repo" update-index --skip-worktree ".hshdependencies"
	    fi
            ;;
        rm)
            if hsh_git "$hd_repo" ls-files | grep -q '\.hshdependencies' 
            then
                hd_sha1="$(hsh_git "$hd_repo" show HEAD:.hshdependencies | sed "\,^$1\$,d" | hsh_git "$hd_repo" hash-object -t blob -w --stdin)"
                hsh_git "$hd_repo" update-index --cacheinfo "100644" "$hd_sha1" ".hshdependencies"
		hsh_git "$hd_repo" update-index --skip-worktree ".hshdependencies"
            fi
            ;;
        *)
            hsh_die "unknown action '$hd_action'"
            ;;
    esac
}

hsh_die() {
    echo "$@"
    exit 1
}

hsh_edit_usage() {
    cat <<EOF
usage: hsh edit <repository> <file>

edit repository files that are not in the worktree

files:
    readme
    license
    gitignore
    gitattributes
    h.sh
EOF
}

hsh_edit_cleanup() {
    if [ -e "$HSH_DIR/EDIT" ]
    then
        rm "$HSH_DIR/EDIT"
    fi
}


hsh_edit() {
    while [ $# -ne 0 ]
    do
        case "$1" in
            -h|--help)
                hsh_init_usage
                return 0
                ;;
            -*)
                hsh_die "unknown option '$1' for command init"     
                ;;
            *)
                he_repo="$1"
                shift
                break
                ;;
        esac
        shift
    done
    if [ -z "${he_repo-}" ]
    then
        hsh_edit_usage
        exit 1
    fi
    if [ -z "$1" ]
    then
        hsh_edit_usage
        exit 1
    fi
    he_target="$1"
    shift
    case "$he_target" in
        readme)
            he_target="README.md"
            ;;
        license)
            he_target="LICENSE"
            ;;
        gitignore)
            he_target=".gitignore"
            ;;
        gitattributes)
            he_target=".gitattributes"
            ;;
        h.sh)
            he_target="h.sh"
            ;;
    esac
    trap "hsh_edit_cleanup" EXIT HUP INT QUIT ABRT TERM
    if hsh_git "$he_repo" ls-files | grep -q "^$he_target\$"; then
        hsh_git "$he_repo" show "HEAD:$he_target" > "$HSH_DIR/EDIT"
    else
        if [ "$he_target" = "h.sh" ]
        then
            hsh_git hsh show HEAD:h.sh.template > "$HSH_DIR/EDIT"
        else
            touch "$HSH_DIR/EDIT"
        fi
    fi
    "${EDITOR:-vim}" "$HSH_DIR/EDIT"
    he_sha1="$(hsh_git "$he_repo" hash-object -t blob -w --stdin < "$HSH_DIR/EDIT")"
    hsh_git "$he_repo" update-index --add --cacheinfo "100644" "$he_sha1" "$he_target"
    hsh_git "$he_repo" update-index --skip-worktree "$he_target"
    rm "$HSH_DIR/EDIT"
}

hsh_find_root() {
    hfr_start="${1}"
    hfr_root="$hfr_start"
    while [ "$hfr_root" != "/" ] \
        && [ ! -e "$hfr_root/.hsh" ]
    do
        hfr_root="$(dirname -- "$hfr_root")"
    done
    if [ "$hfr_root" = "/" ]
    then
        hsh_die "'$hfr_start' is no in a hsh root"
    fi
    echo "$hfr_root"
    return 0
}

hsh_git() {
    hg_repo="$1"
    shift
    if [ "$hg_repo" = "all" ] || [ "$hg_repo" = "a" ]
    then
        ls -1 "$HSH_DIR/repos" | while IFS= read -r hg_repo
        do
            git --git-dir "$HSH_DIR/repos/$hg_repo" "$@" || true
        done
    else
        git --git-dir "$HSH_DIR/repos/$hg_repo" "$@"
    fi
}

hsh_git_with_hook() {
    hg_repo="$1"
    shift
    if [ "$hg_repo" = "all" ] || [ "$hg_repo" = "a" ]
    then
        ls -1 "$HSH_DIR/repos" | while IFS= read -r hg_repo
        do
            echo "# $hg_repo"
            if git --git-dir "$HSH_DIR/repos/$hg_repo" "$@"
            then
                hsh_hook "$HSH_ROOT" "$hg_repo" "$1"
            fi
        done
    else
        git --git-dir "$HSH_DIR/repos/$hg_repo" "$@"
        hsh_hook "$HSH_ROOT" "$hg_repo" "$1"
    fi
}

hsh_hook() {
    hh_root="$1"
    shift
    hh_repo="$1"
    shift
    hh_action="$1"
    shift
    if [ $# -ne 0 ]
    then
        hh_bundle_root="$1"
        shift
    fi
    if hsh_git "$hh_repo" ls-files | grep -q '^h\.sh$' 
    then
        (
            cd "$hh_root"
            export HSH_ROOT="$hh_root"
            export HSH_REPOSITORY="$hh_repo"
            export HSH_ACTION="$hh_action"
	    if [ -n "${hh_bundle_root-}" ]
	    then
                export HSH_BUNDLE_ROOT="$hh_bundle_root"
	    fi

            hsh_git "$hh_repo" show HEAD:h.sh | sh -s
        )
    fi
}

hsh_init_cleanup() {
    if [ "$1" ]
    then
        if [ "$2" ]
        then
            rm -rf "$2"
        fi
        rm -rf "$1"
    fi
}

hsh_init_usage() {
    cat << EOF
usage: hsh init <name>

create and setup a new git repository.

EOF
}

hsh_init() {
    while [ $# -ne 0 ]
    do
        case "$1" in
            -h|--help)
                hsh_init_usage
                return 0
                ;;
            -*)
                hsh_die "unknown option '$1' for command init"     
                ;;
            *)
                hi_repo="$1"
                shift
                break
                ;;
        esac
        shift
    done

    if [ -z "${hi_repo-}" ]
    then
        hsh_init_usage
        return 1
    fi
	hi_repo_dir="$HSH_DIR/repos/$hi_repo"
	hi_tmp_dir="$HSH_DIR/INIT"

    if [ -e "$hi_repo_dir" ]
    then
        hsh_die "repository '$hi_repo' already exists"   
    fi

    trap "hsh_init_cleanup \"$hi_tmp_dir\" \"$hi_repo\"" EXIT HUP INT QUIT ABRT TERM
    mkdir "$hi_tmp_dir"
    # TODO this should be a bare initialize
    #      and then setup HEAD and master branch config
    git init "$hi_tmp_dir"
    mv "$hi_tmp_dir/.git" "$hi_repo_dir"        
	hsh_config_repo "$hi_repo"
    rmdir "$hi_tmp_dir"
}

hsh_remove_usage() {
    cat <<EOF
usage: hsh remove <repository>
EOF
}

hsh_list_dependent_repo_r() {
    ls -1 "$HSH_DIR/repos" | while IFS= read -r hr_dep
    do
        hsh_git "$hr_dep" ls-files | grep -q .hshdependencies || continue 
        hsh_git "$hr_dep" show HEAD:.hshdependencies | grep -q "[/:]/?$1/\?\(\.git\)\?\$" && hsh_list_dependent_repo_r "$hr_dep"
    done
    echo "$1" 
}

hsh_remove_r() {
    ls -1 "$HSH_DIR/repos" | while IFS= read -r hr_dep
    do
        hsh_git "$hr_dep" ls-files | grep -q .hshdependencies || continue 
        hsh_git "$hr_dep" show HEAD:.hshdependencies | grep -q "[/:]\?$1/\?\(\.git\)\?\$" && hsh_remove_r "$hr_dep"
    done
    hsh_git "$1" ls-files | while IFS= read -r hr_path
    do
        if [ -e "$HSH_ROOT/$hr_path" ]
        then
            hr_dir="$(dirname "$HSH_ROOT/$hr_path")"
            rm "$HSH_ROOT/$hr_path"
            if [ $(ls -1 "$hr_dir" | wc -l) -eq 0 ]  
            then
                rmdir "$hr_dir"
            fi
        fi
    done
    rm -rf "$1" 
    hsh_hook "$HSH_DIR" "$1" "remove"
}

hsh_remove() {
    while [ $# -ne 0 ]
    do
        case "$1" in
            -h|--help)
                hsh_remove_usage
                return 0
                ;;
            -y|--yes)
                hr_yes=1
                ;;
            -*)
                hsh_die "unknown option '$1' for command init"     
                ;;
            *)
                hr_repo="$1"
                shift
                break
                ;;
        esac
        shift
    done

    if [ -z "${hr_repo-}" ]
    then
        hsh_remove_usage
        return 1
    fi
	hr_repo_dir="$HSH_DIR/repos/$hr_repo"
    [ -e "$hr_repo_dir" ] || return 0

    hr_deps="$(hsh_list_dependent_repo_r "$hr_repo" | sort -u)"
    if [ -n "$hr_deps" ] && [ -z "${hr_yes-}" ]
    then
        printf "removing '$hr_repo' will remove the following repositories:\n$hr_deps\n" 
        printf "continue? (y/N) " 
        save_stty="$(stty -g)"
        trap "stty $save_stty" EXIT HUP INT QUIT ABRT TERM
        stty raw -echo 
        while IFS= read -r doit;
        do
            printf "\n" 
            case $doit in
                y|Y)
                    break
                    ;;
                *)
                    return 1
                    ;;
            esac
        done
    fi
    hsh_remove_r "$hr_repo"


}

hsh_url_to_name() {
    # remove .git or /.git
    hutn_name="${1%.git}"
    hutn_name="${hutn_name%/}"
    # remove hsh_ prefix
    hutn_name="${hutn_name##*:}"
    hutn_name="${hutn_name##*/}"
    hutn_name="${hutn_name#hsh_}"
    hutn_name="${hutn_name#hsh-}"
    echo "$hutn_name"
}

hsh_usage()  {
    cat << EOF
usage: hsh clone <url>
       hsh bundle 
       hsh init <name>
       hsh remove <name>
       hsh dependency [[add|rm] url]
       hsh edit <file>
       hsh <git action> <repo> [<git params>]
EOF
}

hsh_version() {
    echo "v0.1"
}


########
# Main #
########

while [ $# -ne 0 ]
do
    case "$1" in
        -C)
            shift
            if [ $# -eq 0 ]
            then
                hsh_die "missing parameter for option '-C'"
            fi
            h_root="$1" 
            ;;
        -*)
            hsh_die "unknown option '$1'"
            ;;
        *)
            h_action="$1"
            shift
            break
            ;;
    esac
    shift
done

if [ -z "${h_action-}" ]
then
    hsh_usage
    exit 1
fi

if [ "$h_action" != "version" ] \
    && [ "$h_action" != "help" ]
then
    # global variable setup
    HSH_ROOT="$(hsh_find_root "${h_root:-$(pwd)}")" 
    HSH_DIR="$HSH_ROOT/.hsh"
fi

case "$h_action" in
    bundle)
        hsh_bundle "$@"
        ;;
    clone)
        hsh_clone "$@"
        ;;
    completion)
        hsh_completion "$@"
        ;;
    dependency)
        hsh_dependency "$@"
        ;;
    edit)
        hsh_edit "$@"
        ;;
    help)
        hsh_usage "$@"
        ;;
    init)
        hsh_init "$@"
        ;;
    remove)
        hsh_remove "$@"
        ;;
    version)
        hsh_version "$@" 
        ;;
    *)
        if [ -z "${h_repo-}" ]
        then
            if [ $# -eq 0 ]
            then
                hsh_usage
                exit 1
            fi
            h_repo="$1"
            shift
        fi
        hsh_git_with_hook "$h_repo" "$h_action" "$@"
esac
